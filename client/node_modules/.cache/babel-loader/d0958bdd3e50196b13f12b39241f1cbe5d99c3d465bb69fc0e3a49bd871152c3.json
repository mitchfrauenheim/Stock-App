{"ast":null,"code":"import { animated as t, to as n, useTransition as e, useSpring as r } from \"@react-spring/web\";\nimport { useTheme as i, radiansToDegrees as a, positionFromAngle as o, degreesToRadians as u, midAngle as l, useMotionConfig as s, usePropertyAccessor as d, textPropsByEngine as f, getDistance as c, getAngle as g } from \"@nivo/core\";\nimport { jsx as p, jsxs as h } from \"react/jsx-runtime\";\nimport { useMemo as v, createElement as A, useCallback as x } from \"react\";\nimport { useInheritedColor as R } from \"@nivo/colors\";\nimport { line as m, arc as y } from \"d3-shape\";\nfunction M() {\n  return M = Object.assign || function (t) {\n    for (var n = 1; n < arguments.length; n++) {\n      var e = arguments[n];\n      for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n    }\n    return t;\n  }, M.apply(this, arguments);\n}\nvar k = {\n    pointerEvents: \"none\"\n  },\n  C = function (n) {\n    var e = n.label,\n      r = n.style,\n      a = i();\n    return p(t.g, {\n      transform: r.transform,\n      opacity: r.progress,\n      style: k,\n      children: p(t.text, {\n        textAnchor: \"middle\",\n        dominantBaseline: \"central\",\n        style: M({}, a.labels.text, {\n          fill: r.textColor\n        }),\n        children: e\n      })\n    });\n  },\n  b = function (t) {\n    var n = t % (2 * Math.PI);\n    return n < 0 && (n += 2 * Math.PI), n;\n  },\n  L = function (t, n) {\n    return t.filter(function (t) {\n      return Math.abs(a(t.arc.endAngle - t.arc.startAngle)) >= n;\n    });\n  },\n  P = function (t, n, e, r, i) {\n    return [\"A\", t, t, 0, n, e, r, i].join(\" \");\n  },\n  O = [\"startAngle\", \"middleAngle\", \"endAngle\", \"innerRadius\", \"centerRadius\", \"outerRadius\", \"pushIn\", \"pushOut\"],\n  E = {\n    startAngle: {\n      enter: function (t) {\n        return M({}, t, {\n          endAngle: t.startAngle\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          startAngle: t.endAngle\n        });\n      }\n    },\n    middleAngle: {\n      enter: function (t) {\n        var n = t.startAngle + (t.endAngle - t.startAngle) / 2;\n        return M({}, t, {\n          startAngle: n,\n          endAngle: n\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        var n = t.startAngle + (t.endAngle - t.startAngle) / 2;\n        return M({}, t, {\n          startAngle: n,\n          endAngle: n\n        });\n      }\n    },\n    endAngle: {\n      enter: function (t) {\n        return M({}, t, {\n          startAngle: t.endAngle\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          endAngle: t.startAngle\n        });\n      }\n    },\n    innerRadius: {\n      enter: function (t) {\n        return M({}, t, {\n          outerRadius: t.innerRadius\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          innerRadius: t.outerRadius\n        });\n      }\n    },\n    centerRadius: {\n      enter: function (t) {\n        var n = t.innerRadius + (t.outerRadius - t.innerRadius) / 2;\n        return M({}, t, {\n          innerRadius: n,\n          outerRadius: n\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        var n = t.innerRadius + (t.outerRadius - t.innerRadius) / 2;\n        return M({}, t, {\n          innerRadius: n,\n          outerRadius: n\n        });\n      }\n    },\n    outerRadius: {\n      enter: function (t) {\n        return M({}, t, {\n          innerRadius: t.outerRadius\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          outerRadius: t.innerRadius\n        });\n      }\n    },\n    pushIn: {\n      enter: function (t) {\n        return M({}, t, {\n          innerRadius: t.innerRadius - t.outerRadius + t.innerRadius,\n          outerRadius: t.innerRadius\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          innerRadius: t.outerRadius,\n          outerRadius: t.outerRadius + t.outerRadius - t.innerRadius\n        });\n      }\n    },\n    pushOut: {\n      enter: function (t) {\n        return M({}, t, {\n          innerRadius: t.outerRadius,\n          outerRadius: t.outerRadius + t.outerRadius - t.innerRadius\n        });\n      },\n      update: function (t) {\n        return t;\n      },\n      leave: function (t) {\n        return M({}, t, {\n          innerRadius: t.innerRadius - t.outerRadius + t.innerRadius,\n          outerRadius: t.innerRadius\n        });\n      }\n    }\n  },\n  I = function (t, n) {\n    return v(function () {\n      var e = E[t];\n      return {\n        enter: function (t) {\n          return M({\n            progress: 0\n          }, e.enter(t.arc), n ? n.enter(t) : {});\n        },\n        update: function (t) {\n          return M({\n            progress: 1\n          }, e.update(t.arc), n ? n.update(t) : {});\n        },\n        leave: function (t) {\n          return M({\n            progress: 0\n          }, e.leave(t.arc), n ? n.leave(t) : {});\n        }\n      };\n    }, [t, n]);\n  },\n  T = function (t, n) {\n    var e = l(t) - Math.PI / 2,\n      r = t.innerRadius + (t.outerRadius - t.innerRadius) * n;\n    return o(e, r);\n  },\n  j = function (t) {\n    return function (e, r, i, a) {\n      return n([e, r, i, a], function (n, e, r, i) {\n        var a = T({\n          startAngle: n,\n          endAngle: e,\n          innerRadius: r,\n          outerRadius: i\n        }, t);\n        return \"translate(\" + a.x + \",\" + a.y + \")\";\n      });\n    };\n  },\n  W = function (t, n, r, i) {\n    void 0 === n && (n = .5), void 0 === r && (r = \"innerRadius\");\n    var a = s(),\n      o = a.animate,\n      u = a.config,\n      l = I(r, i);\n    return {\n      transition: e(t, {\n        keys: function (t) {\n          return t.id;\n        },\n        initial: l.update,\n        from: l.enter,\n        enter: l.update,\n        update: l.update,\n        leave: l.leave,\n        config: u,\n        immediate: !o\n      }),\n      interpolate: j(n)\n    };\n  },\n  S = function (t) {\n    var n = t.data,\n      e = t.offset,\n      r = void 0 === e ? .5 : e,\n      i = t.skipAngle,\n      a = void 0 === i ? 0 : i,\n      o = t.computeExtraProps,\n      u = void 0 === o ? function () {\n        return {};\n      } : o;\n    return v(function () {\n      return L(n, a).map(function (t) {\n        var n = T(t.arc, r);\n        return M({}, u(t), {\n          x: n.x,\n          y: n.y,\n          data: t\n        });\n      });\n    }, [n, r, a, u]);\n  },\n  B = function (t) {\n    var n = t.center,\n      e = t.data,\n      r = t.transitionMode,\n      o = t.label,\n      u = t.radiusOffset,\n      l = t.skipAngle,\n      s = t.textColor,\n      f = t.component,\n      c = void 0 === f ? C : f,\n      g = d(o),\n      h = i(),\n      x = R(s, h),\n      m = v(function () {\n        return e.filter(function (t) {\n          return Math.abs(a(t.arc.endAngle - t.arc.startAngle)) >= l;\n        });\n      }, [e, l]),\n      y = W(m, u, r),\n      k = y.transition,\n      b = y.interpolate,\n      L = c;\n    return p(\"g\", {\n      transform: \"translate(\" + n[0] + \",\" + n[1] + \")\",\n      children: k(function (t, n) {\n        return A(L, {\n          key: n.id,\n          datum: n,\n          label: g(n),\n          style: M({}, t, {\n            transform: b(t.startAngle, t.endAngle, t.innerRadius, t.outerRadius),\n            textColor: x(n)\n          })\n        });\n      })\n    });\n  },\n  w = function (t, n, e) {\n    t.textAlign = \"center\", t.textBaseline = \"middle\", t.font = e.labels.text.fontSize + \"px \" + e.labels.text.fontFamily, n.forEach(function (n) {\n      t.fillStyle = n.textColor, t.fillText(\"\" + n.label, n.x, n.y);\n    });\n  },\n  z = function (t) {\n    var n = t.data,\n      e = t.offset,\n      r = t.skipAngle,\n      a = t.label,\n      o = t.textColor,\n      u = d(a),\n      l = i(),\n      s = R(o, l),\n      f = x(function (t) {\n        return {\n          label: u(t),\n          textColor: s(t)\n        };\n      }, [u, s]);\n    return S({\n      data: n,\n      offset: e,\n      skipAngle: r,\n      computeExtraProps: f\n    });\n  },\n  F = C,\n  G = function (n) {\n    var e = n.label,\n      r = n.style,\n      a = i();\n    return h(t.g, {\n      opacity: r.opacity,\n      children: [p(t.path, {\n        fill: \"none\",\n        stroke: r.linkColor,\n        strokeWidth: r.thickness,\n        d: r.path\n      }), p(t.text, {\n        transform: r.textPosition,\n        textAnchor: r.textAnchor,\n        dominantBaseline: \"central\",\n        style: M({}, a.labels.text, {\n          fill: r.textColor\n        }),\n        children: e\n      })]\n    });\n  },\n  q = function (t) {\n    var n = b(t.startAngle + (t.endAngle - t.startAngle) / 2 - Math.PI / 2);\n    return n < Math.PI / 2 || n > 1.5 * Math.PI ? \"start\" : \"end\";\n  },\n  D = function (t, n, e, r) {\n    var i,\n      a,\n      u = b(t.startAngle + (t.endAngle - t.startAngle) / 2 - Math.PI / 2),\n      l = o(u, t.outerRadius + n),\n      s = o(u, t.outerRadius + n + e);\n    return u < Math.PI / 2 || u > 1.5 * Math.PI ? (i = \"after\", a = {\n      x: s.x + r,\n      y: s.y\n    }) : (i = \"before\", a = {\n      x: s.x - r,\n      y: s.y\n    }), {\n      side: i,\n      points: [l, s, a]\n    };\n  },\n  H = m().x(function (t) {\n    return t.x;\n  }).y(function (t) {\n    return t.y;\n  }),\n  J = function (t, e, r, i, a, o, u) {\n    return n([t, e, r, i, a, o, u], function (t, n, e, r, i, a, o) {\n      var u = D({\n        startAngle: t,\n        endAngle: n,\n        innerRadius: e,\n        outerRadius: r\n      }, i, a, o).points;\n      return H(u);\n    });\n  },\n  K = function (t, e, r, i) {\n    return n([t, e, r, i], function (t, n, e, r) {\n      return q({\n        startAngle: t,\n        endAngle: n,\n        innerRadius: e,\n        outerRadius: r\n      });\n    });\n  },\n  N = function (t, e, r, i, a, o, u, l) {\n    return n([t, e, r, i, a, o, u, l], function (t, n, e, r, i, a, o, u) {\n      var l = D({\n          startAngle: t,\n          endAngle: n,\n          innerRadius: e,\n          outerRadius: r\n        }, i, a, o),\n        s = l.points,\n        d = l.side,\n        f = s[2];\n      return \"before\" === d ? f.x -= u : f.x += u, \"translate(\" + f.x + \",\" + f.y + \")\";\n    });\n  },\n  Q = function (t) {\n    var n = t.data,\n      r = t.offset,\n      a = void 0 === r ? 0 : r,\n      o = t.diagonalLength,\n      u = t.straightLength,\n      l = t.skipAngle,\n      d = void 0 === l ? 0 : l,\n      f = t.textOffset,\n      c = t.linkColor,\n      g = t.textColor,\n      p = s(),\n      h = p.animate,\n      A = p.config,\n      x = i(),\n      m = R(c, x),\n      y = R(g, x),\n      M = function (t, n) {\n        return v(function () {\n          return L(t, n);\n        }, [t, n]);\n      }(n, d),\n      k = function (t) {\n        var n = t.offset,\n          e = t.diagonalLength,\n          r = t.straightLength,\n          i = t.textOffset,\n          a = t.getLinkColor,\n          o = t.getTextColor;\n        return v(function () {\n          return {\n            enter: function (t) {\n              return {\n                startAngle: t.arc.startAngle,\n                endAngle: t.arc.endAngle,\n                innerRadius: t.arc.innerRadius,\n                outerRadius: t.arc.outerRadius,\n                offset: n,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset: i,\n                linkColor: a(t),\n                textColor: o(t),\n                opacity: 0\n              };\n            },\n            update: function (t) {\n              return {\n                startAngle: t.arc.startAngle,\n                endAngle: t.arc.endAngle,\n                innerRadius: t.arc.innerRadius,\n                outerRadius: t.arc.outerRadius,\n                offset: n,\n                diagonalLength: e,\n                straightLength: r,\n                textOffset: i,\n                linkColor: a(t),\n                textColor: o(t),\n                opacity: 1\n              };\n            },\n            leave: function (t) {\n              return {\n                startAngle: t.arc.startAngle,\n                endAngle: t.arc.endAngle,\n                innerRadius: t.arc.innerRadius,\n                outerRadius: t.arc.outerRadius,\n                offset: n,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset: i,\n                linkColor: a(t),\n                textColor: o(t),\n                opacity: 0\n              };\n            }\n          };\n        }, [e, r, i, a, o]);\n      }({\n        offset: a,\n        diagonalLength: o,\n        straightLength: u,\n        textOffset: f,\n        getLinkColor: m,\n        getTextColor: y\n      });\n    return {\n      transition: e(M, {\n        keys: function (t) {\n          return t.id;\n        },\n        initial: k.update,\n        from: k.enter,\n        enter: k.update,\n        update: k.update,\n        leave: k.leave,\n        config: A,\n        immediate: !h\n      }),\n      interpolateLink: J,\n      interpolateTextAnchor: K,\n      interpolateTextPosition: N\n    };\n  },\n  U = function (t) {\n    var n = t.center,\n      e = t.data,\n      r = t.label,\n      i = t.skipAngle,\n      a = t.offset,\n      o = t.diagonalLength,\n      u = t.straightLength,\n      l = t.strokeWidth,\n      s = t.textOffset,\n      f = t.textColor,\n      c = t.linkColor,\n      g = t.component,\n      h = void 0 === g ? G : g,\n      v = d(r),\n      x = Q({\n        data: e,\n        skipAngle: i,\n        offset: a,\n        diagonalLength: o,\n        straightLength: u,\n        textOffset: s,\n        linkColor: c,\n        textColor: f\n      }),\n      R = x.transition,\n      m = x.interpolateLink,\n      y = x.interpolateTextAnchor,\n      k = x.interpolateTextPosition,\n      C = h;\n    return p(\"g\", {\n      transform: \"translate(\" + n[0] + \",\" + n[1] + \")\",\n      children: R(function (t, n) {\n        return A(C, {\n          key: n.id,\n          datum: n,\n          label: v(n),\n          style: M({}, t, {\n            thickness: l,\n            path: m(t.startAngle, t.endAngle, t.innerRadius, t.outerRadius, t.offset, t.diagonalLength, t.straightLength),\n            textAnchor: y(t.startAngle, t.endAngle, t.innerRadius, t.outerRadius),\n            textPosition: k(t.startAngle, t.endAngle, t.innerRadius, t.outerRadius, t.offset, t.diagonalLength, t.straightLength, t.textOffset)\n          })\n        });\n      })\n    });\n  },\n  V = function (t, n, e, r) {\n    t.textBaseline = \"middle\", t.font = e.labels.text.fontSize + \"px \" + e.labels.text.fontFamily, n.forEach(function (n) {\n      t.fillStyle = n.textColor, t.textAlign = f.canvas.align[n.textAnchor], t.fillText(\"\" + n.label, n.x, n.y), t.beginPath(), t.strokeStyle = n.linkColor, t.lineWidth = r, n.points.forEach(function (n, e) {\n        0 === e ? t.moveTo(n.x, n.y) : t.lineTo(n.x, n.y);\n      }), t.stroke();\n    });\n  },\n  X = function (t) {\n    var n = t.data,\n      e = t.skipAngle,\n      r = void 0 === e ? 0 : e,\n      i = t.offset,\n      o = void 0 === i ? .5 : i,\n      u = t.diagonalLength,\n      l = t.straightLength,\n      s = t.computeExtraProps,\n      d = void 0 === s ? function () {\n        return {};\n      } : s,\n      f = v(function () {\n        return n.filter(function (t) {\n          return Math.abs(a(t.arc.endAngle - t.arc.startAngle)) >= r;\n        }).map(function (t) {\n          return M({}, D(t.arc, o, u, l), {\n            data: t\n          });\n        });\n      }, [n, r, o, u, l]);\n    return v(function () {\n      return f.map(function (t) {\n        return M({}, d(t), t);\n      });\n    }, [f, d]);\n  },\n  Y = function (t) {\n    var n = t.data,\n      e = t.skipAngle,\n      r = t.offset,\n      a = t.diagonalLength,\n      o = t.straightLength,\n      u = t.textOffset,\n      l = void 0 === u ? 0 : u,\n      s = t.label,\n      f = t.linkColor,\n      c = t.textColor,\n      g = d(s),\n      p = i(),\n      h = R(f, p),\n      v = R(c, p),\n      A = x(function (t) {\n        var n,\n          e = {\n            x: t.points[2].x,\n            y: t.points[2].y\n          };\n        return \"before\" === t.side ? (e.x -= l, n = \"end\") : (e.x += l, n = \"start\"), M({}, e, {\n          label: g(t.data),\n          linkColor: h(t.data),\n          textAnchor: n,\n          textColor: v(t.data)\n        });\n      }, [g, h, v, l]);\n    return X({\n      data: n,\n      skipAngle: e,\n      offset: r,\n      diagonalLength: a,\n      straightLength: o,\n      computeExtraProps: A\n    });\n  },\n  Z = G,\n  $ = [\"animated\"],\n  _ = function (e) {\n    var r = e.animated,\n      i = function (t, n) {\n        if (null == t) return {};\n        var e,\n          r,\n          i = {},\n          a = Object.keys(t);\n        for (r = 0; r < a.length; r++) e = a[r], n.indexOf(e) >= 0 || (i[e] = t[e]);\n        return i;\n      }(e, $);\n    return p(t.path, M({\n      d: n([r.radius, r.startAngle, r.endAngle], function (t, n, e) {\n        return function (t, n, e) {\n          var r = Math.min(n, e),\n            i = Math.max(n, e),\n            a = o(u(i), t),\n            l = o(u(r), t);\n          if (i - r >= 360) {\n            var s = o(u(r + 180), t);\n            return [\"M \" + a.x + \" \" + a.y, P(t, 1, 1, s.x, s.y), \"M \" + a.x + \" \" + a.y, P(t, 1, 0, s.x, s.y)].join(\" \");\n          }\n          var d = i - r <= 180 ? 0 : 1;\n          return [\"M \" + a.x + \" \" + a.y, P(t, d, 0, l.x, l.y)].join(\" \");\n        }(t, n, e);\n      })\n    }, i));\n  },\n  tt = function (n) {\n    var e = n.datum,\n      r = n.style,\n      i = n.onClick,\n      a = n.onMouseEnter,\n      o = n.onMouseMove,\n      u = n.onMouseLeave,\n      l = x(function (t) {\n        return null == i ? void 0 : i(e, t);\n      }, [i, e]),\n      s = x(function (t) {\n        return null == a ? void 0 : a(e, t);\n      }, [a, e]),\n      d = x(function (t) {\n        return null == o ? void 0 : o(e, t);\n      }, [o, e]),\n      f = x(function (t) {\n        return null == u ? void 0 : u(e, t);\n      }, [u, e]);\n    return p(t.path, {\n      d: r.path,\n      opacity: r.opacity,\n      fill: e.fill || r.color,\n      stroke: r.borderColor,\n      strokeWidth: r.borderWidth,\n      onClick: i ? l : void 0,\n      onMouseEnter: a ? s : void 0,\n      onMouseMove: o ? d : void 0,\n      onMouseLeave: u ? f : void 0\n    });\n  },\n  nt = function (t, e, r, i, a) {\n    return n([t, e, r, i], function (t, n, e, r) {\n      return a({\n        startAngle: t,\n        endAngle: n,\n        innerRadius: Math.max(0, e),\n        outerRadius: Math.max(0, r)\n      });\n    });\n  },\n  et = function (t, n, r) {\n    void 0 === n && (n = \"innerRadius\");\n    var i = s(),\n      a = i.animate,\n      o = i.config,\n      u = I(n, r);\n    return {\n      transition: e(t, {\n        keys: function (t) {\n          return t.id;\n        },\n        initial: u.update,\n        from: u.enter,\n        enter: u.update,\n        update: u.update,\n        leave: u.leave,\n        config: o,\n        immediate: !a\n      }),\n      interpolate: nt\n    };\n  },\n  rt = function (t) {\n    var n = t.center,\n      e = t.data,\n      r = t.arcGenerator,\n      a = t.borderWidth,\n      o = t.borderColor,\n      u = t.onClick,\n      l = t.onMouseEnter,\n      s = t.onMouseMove,\n      d = t.onMouseLeave,\n      f = t.transitionMode,\n      c = t.component,\n      g = void 0 === c ? tt : c,\n      h = i(),\n      v = R(o, h),\n      x = et(e, f, {\n        enter: function (t) {\n          return {\n            opacity: 0,\n            color: t.color,\n            borderColor: v(t)\n          };\n        },\n        update: function (t) {\n          return {\n            opacity: 1,\n            color: t.color,\n            borderColor: v(t)\n          };\n        },\n        leave: function (t) {\n          return {\n            opacity: 0,\n            color: t.color,\n            borderColor: v(t)\n          };\n        }\n      }),\n      m = x.transition,\n      y = x.interpolate,\n      k = g;\n    return p(\"g\", {\n      transform: \"translate(\" + n[0] + \",\" + n[1] + \")\",\n      children: m(function (t, n) {\n        return A(k, {\n          key: n.id,\n          datum: n,\n          style: M({}, t, {\n            borderWidth: a,\n            path: y(t.startAngle, t.endAngle, t.innerRadius, t.outerRadius, r)\n          }),\n          onClick: u,\n          onMouseEnter: l,\n          onMouseMove: s,\n          onMouseLeave: d\n        });\n      })\n    });\n  },\n  it = function (t, n, e, r, i, a) {\n    void 0 === a && (a = !0);\n    var l = [],\n      s = o(u(r), e);\n    l.push([s.x, s.y]);\n    var d = o(u(i), e);\n    l.push([d.x, d.y]);\n    for (var f = Math.round(Math.min(r, i)); f <= Math.round(Math.max(r, i)); f++) if (f % 90 == 0) {\n      var c = o(u(f), e);\n      l.push([c.x, c.y]);\n    }\n    l = l.map(function (e) {\n      var r = e[0],\n        i = e[1];\n      return [t + r, n + i];\n    }), a && l.push([t, n]);\n    var g = l.map(function (t) {\n        return t[0];\n      }),\n      p = l.map(function (t) {\n        return t[1];\n      }),\n      h = Math.min.apply(Math, g),\n      v = Math.max.apply(Math, g),\n      A = Math.min.apply(Math, p);\n    return {\n      points: l,\n      x: h,\n      y: A,\n      width: v - h,\n      height: Math.max.apply(Math, p) - A\n    };\n  },\n  at = function (t, n, e, r, i, a) {\n    var o = c(i, a, t, n);\n    return o < e && o > r;\n  },\n  ot = function (t, n, e, r, i, a, o) {\n    if (at(t, n, e, r, a, o)) {\n      var u = g(a, o, t, n);\n      return i.find(function (t) {\n        var n = t.startAngle,\n          e = t.endAngle;\n        return u >= n && u < e;\n      });\n    }\n  },\n  ut = function (t, n) {\n    var e = s(),\n      i = e.animate,\n      a = e.config,\n      o = r({\n        startAngle: t.arc.startAngle,\n        endAngle: t.arc.endAngle,\n        innerRadius: t.arc.innerRadius,\n        outerRadius: t.arc.outerRadius,\n        config: a,\n        immediate: !i\n      });\n    return M({}, o, {\n      path: nt(o.startAngle, o.endAngle, o.innerRadius, o.outerRadius, n)\n    });\n  },\n  lt = function (t) {\n    var n = void 0 === t ? {} : t,\n      e = n.cornerRadius,\n      r = void 0 === e ? 0 : e,\n      i = n.padAngle,\n      a = void 0 === i ? 0 : i;\n    return v(function () {\n      return y().innerRadius(function (t) {\n        return t.innerRadius;\n      }).outerRadius(function (t) {\n        return t.outerRadius;\n      }).cornerRadius(r).padAngle(a);\n    }, [r, a]);\n  };\nexport { F as ArcLabelComponent, B as ArcLabelsLayer, _ as ArcLine, Z as ArcLinkLabelComponent, U as ArcLinkLabelsLayer, tt as ArcShape, rt as ArcsLayer, E as arcTransitionModeById, O as arcTransitionModes, it as computeArcBoundingBox, T as computeArcCenter, D as computeArcLink, q as computeArcLinkTextAnchor, w as drawCanvasArcLabels, V as drawCanvasArcLinkLabels, ot as findArcUnderCursor, nt as interpolateArc, j as interpolateArcCenter, at as isCursorInRing, ut as useAnimatedArc, S as useArcCenters, W as useArcCentersTransition, lt as useArcGenerator, z as useArcLabels, Y as useArcLinkLabels, Q as useArcLinkLabelsTransition, X as useArcLinks, I as useArcTransitionMode, et as useArcsTransition };","map":{"version":3,"mappings":"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","names":["staticStyle","pointerEvents","ArcLabel","label","style","theme","useTheme","_jsx","animated","g","transform","opacity","progress","text","textAnchor","dominantBaseline","labels","fill","textColor","getNormalizedAngle","angle","normalizedAngle","Math","PI","filterDataBySkipAngle","data","skipAngle","filter","datum","abs","radiansToDegrees","arc","endAngle","startAngle","svgEllipticalArcCommand","radius","largeArcFlag","sweepFlag","x","y","join","arcTransitionModes","arcTransitionModeById","enter","update","leave","middleAngle","innerRadius","outerRadius","centerRadius","pushIn","pushOut","useArcTransitionMode","mode","extraTransition","useMemo","transitionMode","computeArcCenter","offset","midAngle","positionFromAngle","interpolateArcCenter","startAngleValue","endAngleValue","innerRadiusValue","outerRadiusValue","to","centroid","useArcCentersTransition","extra","useMotionConfig","animate","springConfig","config","phases","transition","useTransition","keys","id","initial","from","immediate","interpolate","useArcCenters","i","o","computeExtraProps","map","position","ArcLabelsLayer","center","labelAccessor","radiusOffset","component","getLabel","usePropertyAccessor","getTextColor","useInheritedColor","filteredData","Label","children","transitionProps","createElement","key","drawCanvasArcLabels","ctx","textAlign","textBaseline","font","fontSize","fontFamily","forEach","fillStyle","fillText","useArcLabels","useCallback","ArcLabelComponent","ArcLinkLabel","_jsxs","path","stroke","linkColor","strokeWidth","thickness","d","textPosition","computeArcLinkTextAnchor","centerAngle","computeArcLink","diagonalLength","straightLength","side","point2","point0","point1","points","lineGenerator","line","interpolateLink","offsetValue","diagonalLengthValue","straightLengthValue","diagonalLengthAnimated","straightLengthAnimated","interpolateTextAnchor","interpolateTextPosition","textOffsetValue","textOffset","useArcLinkLabelsTransition","getLinkColor","useFilteredDataBySkipAngle","transitionPhases","useTransitionPhases","ArcLinkLabelsLayer","drawCanvasArcLinkLabels","textPropsByEngine","canvas","align","beginPath","strokeStyle","lineWidth","point","index","moveTo","lineTo","useArcLinks","links","link","useArcLinkLabels","ArcLinkLabelComponent","ArcLine","animatedProps","rest","start","end","originalStartAngle","originalEndAngle","min","max","degreesToRadians","mid","generateSvgArc","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","event","handleMouseEnter","handleMouseMove","handleMouseLeave","color","borderColor","borderWidth","undefined","interpolateArc","arcGenerator","useArcsTransition","ArcsLayer","getBorderColor","Arc","computeArcBoundingBox","centerX","centerY","includeCenter","p0","push","p1","round","p","xs","ys","x0","x1","y0","width","height","isCursorInRing","cursorX","cursorY","distance","getDistance","findArcUnderCursor","arcs","cursorAngle","getAngle","find","useAnimatedArc","datumWithArc","animatedValues","useSpring","useArcGenerator","e","cornerRadius","padAngle","d3Arc"],"sources":["/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_labels/ArcLabel.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/utils.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arcTransitionMode.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/centers.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_labels/canvas.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_labels/useArcLabels.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_labels/index.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/compute.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/canvas.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/useArcLinks.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/arc_link_labels/index.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/ArcLine.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/ArcShape.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/interpolateArc.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/useArcsTransition.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/ArcsLayer.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/boundingBox.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/interactivity.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/useAnimatedArc.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/arcs/src/useArcGenerator.ts"],"sourcesContent":["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n","import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n","import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n","import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n","import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n","import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(\n        event => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(\n        event => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n","import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}