{"ast":null,"code":"import { useMemo as e, useState as i, useCallback as t, createElement as n, Fragment as r, useRef as a, useEffect as o } from \"react\";\nimport { usePropertyAccessor as d, useValueFormatter as l, degreesToRadians as s, radiansToDegrees as c, Container as u, useDimensions as v, bindDefs as f, SvgWrapper as g, ResponsiveWrapper as L, useTheme as h, getRelativeCursor as b } from \"@nivo/core\";\nimport { useArcGenerator as p, computeArcBoundingBox as k, ArcsLayer as A, ArcLinkLabelsLayer as R, ArcLabelsLayer as m, useArcLabels as O, useArcLinkLabels as C, drawCanvasArcLinkLabels as I, drawCanvasArcLabels as x, findArcUnderCursor as M } from \"@nivo/arcs\";\nimport { BoxLegendSvg as y, renderLegendToCanvas as w } from \"@nivo/legends\";\nimport { jsx as W, Fragment as S } from \"react/jsx-runtime\";\nimport { pie as T } from \"d3-shape\";\nimport { useOrdinalColorScale as V, useInheritedColor as B } from \"@nivo/colors\";\nimport { BasicTooltip as G, useTooltip as E } from \"@nivo/tooltip\";\nfunction D() {\n  return D = Object.assign || function (e) {\n    for (var i = 1; i < arguments.length; i++) {\n      var t = arguments[i];\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n    return e;\n  }, D.apply(this, arguments);\n}\nfunction F(e, i) {\n  if (null == e) return {};\n  var t,\n    n,\n    r = {},\n    a = Object.keys(e);\n  for (n = 0; n < a.length; n++) t = a[n], i.indexOf(t) >= 0 || (r[t] = e[t]);\n  return r;\n}\nvar H,\n  X = function (e) {\n    var i = e.width,\n      t = e.height,\n      n = e.legends,\n      r = e.data,\n      a = e.toggleSerie;\n    return W(S, {\n      children: n.map(function (e, n) {\n        var o;\n        return W(y, D({}, e, {\n          containerWidth: i,\n          containerHeight: t,\n          data: null != (o = e.data) ? o : r,\n          toggleSerie: e.toggleSerie ? a : void 0\n        }), n);\n      })\n    });\n  },\n  Y = {\n    id: \"id\",\n    value: \"value\",\n    sortByValue: !1,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n    layers: [\"arcLinkLabels\", \"arcs\", \"arcLabels\", \"legends\"],\n    startAngle: 0,\n    endAngle: 360,\n    fit: !0,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n    borderWidth: 0,\n    borderColor: {\n      from: \"color\",\n      modifiers: [[\"darker\", 1]]\n    },\n    enableArcLabels: !0,\n    arcLabel: \"formattedValue\",\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: .5,\n    arcLabelsTextColor: {\n      theme: \"labels.text.fill\"\n    },\n    enableArcLinkLabels: !0,\n    arcLinkLabel: \"id\",\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: {\n      theme: \"labels.text.fill\"\n    },\n    arcLinkLabelsColor: {\n      theme: \"axis.ticks.line.stroke\"\n    },\n    colors: {\n      scheme: \"nivo\"\n    },\n    defs: [],\n    fill: [],\n    isInteractive: !0,\n    animate: !0,\n    motionConfig: \"gentle\",\n    transitionMode: \"innerRadius\",\n    tooltip: function (e) {\n      var i = e.datum;\n      return W(G, {\n        id: i.id,\n        value: i.formattedValue,\n        enableChip: !0,\n        color: i.color\n      });\n    },\n    legends: [],\n    role: \"img\",\n    pixelRatio: \"undefined\" != typeof window && null != (H = window.devicePixelRatio) ? H : 1\n  },\n  j = [\"points\"],\n  P = function (i) {\n    var t = i.data,\n      n = i.id,\n      r = void 0 === n ? Y.id : n,\n      a = i.value,\n      o = void 0 === a ? Y.value : a,\n      s = i.valueFormat,\n      c = i.colors,\n      u = void 0 === c ? Y.colors : c,\n      v = d(r),\n      f = d(o),\n      g = l(s),\n      L = V(u, \"id\");\n    return e(function () {\n      return t.map(function (e) {\n        var i,\n          t = v(e),\n          n = f(e),\n          r = {\n            id: t,\n            label: null != (i = e.label) ? i : t,\n            hidden: !1,\n            value: n,\n            formattedValue: g(n),\n            data: e\n          };\n        return D({}, r, {\n          color: L(r)\n        });\n      });\n    }, [t, v, f, g, L]);\n  },\n  q = function (i) {\n    var t = i.data,\n      n = i.startAngle,\n      r = i.endAngle,\n      a = i.innerRadius,\n      o = i.outerRadius,\n      d = i.padAngle,\n      l = i.sortByValue,\n      u = i.activeId,\n      v = i.activeInnerRadiusOffset,\n      f = i.activeOuterRadiusOffset,\n      g = i.hiddenIds,\n      L = e(function () {\n        var e = T().value(function (e) {\n          return e.value;\n        }).startAngle(s(n)).endAngle(s(r)).padAngle(s(d));\n        return l || e.sortValues(null), e;\n      }, [n, r, d, l]);\n    return e(function () {\n      var e = t.filter(function (e) {\n        return !g.includes(e.id);\n      });\n      return {\n        dataWithArc: L(e).map(function (e) {\n          var i = Math.abs(e.endAngle - e.startAngle);\n          return D({}, e.data, {\n            arc: {\n              index: e.index,\n              startAngle: e.startAngle,\n              endAngle: e.endAngle,\n              innerRadius: u === e.data.id ? a - v : a,\n              outerRadius: u === e.data.id ? o + f : o,\n              thickness: o - a,\n              padAngle: e.padAngle,\n              angle: i,\n              angleDeg: c(i)\n            }\n          });\n        }),\n        legendData: t.map(function (e) {\n          return D({}, e, {\n            hidden: g.includes(e.id)\n          });\n        })\n      };\n    }, [L, t, g, u, a, v, o, f]);\n  },\n  z = function (e) {\n    var n = e.data,\n      r = e.radius,\n      a = e.innerRadius,\n      o = e.startAngle,\n      d = void 0 === o ? Y.startAngle : o,\n      l = e.endAngle,\n      c = void 0 === l ? Y.endAngle : l,\n      u = e.padAngle,\n      v = void 0 === u ? Y.padAngle : u,\n      f = e.sortByValue,\n      g = void 0 === f ? Y.sortByValue : f,\n      L = e.cornerRadius,\n      h = void 0 === L ? Y.cornerRadius : L,\n      b = e.activeInnerRadiusOffset,\n      k = void 0 === b ? Y.activeInnerRadiusOffset : b,\n      A = e.activeOuterRadiusOffset,\n      R = void 0 === A ? Y.activeOuterRadiusOffset : A,\n      m = i(null),\n      O = m[0],\n      C = m[1],\n      I = i([]),\n      x = I[0],\n      M = I[1],\n      y = q({\n        data: n,\n        startAngle: d,\n        endAngle: c,\n        innerRadius: a,\n        outerRadius: r,\n        padAngle: v,\n        sortByValue: g,\n        activeId: O,\n        activeInnerRadiusOffset: k,\n        activeOuterRadiusOffset: R,\n        hiddenIds: x\n      }),\n      w = t(function (e) {\n        M(function (i) {\n          return i.indexOf(e) > -1 ? i.filter(function (i) {\n            return i !== e;\n          }) : [].concat(i, [e]);\n        });\n      }, []);\n    return D({}, y, {\n      arcGenerator: p({\n        cornerRadius: h,\n        padAngle: s(v)\n      }),\n      setActiveId: C,\n      toggleSerie: w\n    });\n  },\n  J = function (n) {\n    var r = n.data,\n      a = n.width,\n      o = n.height,\n      d = n.innerRadius,\n      l = void 0 === d ? Y.innerRadius : d,\n      c = n.startAngle,\n      u = void 0 === c ? Y.startAngle : c,\n      v = n.endAngle,\n      f = void 0 === v ? Y.endAngle : v,\n      g = n.padAngle,\n      L = void 0 === g ? Y.padAngle : g,\n      h = n.sortByValue,\n      b = void 0 === h ? Y.sortByValue : h,\n      A = n.cornerRadius,\n      R = void 0 === A ? Y.cornerRadius : A,\n      m = n.fit,\n      O = void 0 === m ? Y.fit : m,\n      C = n.activeInnerRadiusOffset,\n      I = void 0 === C ? Y.activeInnerRadiusOffset : C,\n      x = n.activeOuterRadiusOffset,\n      M = void 0 === x ? Y.activeOuterRadiusOffset : x,\n      y = i(null),\n      w = y[0],\n      W = y[1],\n      S = i([]),\n      T = S[0],\n      V = S[1],\n      B = e(function () {\n        var e,\n          i = Math.min(a, o) / 2,\n          t = i * Math.min(l, 1),\n          n = a / 2,\n          r = o / 2;\n        if (O) {\n          var d = k(n, r, i, u - 90, f - 90),\n            s = d.points,\n            c = F(d, j),\n            v = Math.min(a / c.width, o / c.height),\n            g = {\n              width: c.width * v,\n              height: c.height * v\n            };\n          g.x = (a - g.width) / 2, g.y = (o - g.height) / 2, n = (n - c.x) / c.width * c.width * v + g.x, r = (r - c.y) / c.height * c.height * v + g.y, e = {\n            box: c,\n            ratio: v,\n            points: s\n          }, i *= v, t *= v;\n        }\n        return {\n          centerX: n,\n          centerY: r,\n          radius: i,\n          innerRadius: t,\n          debug: e\n        };\n      }, [a, o, l, u, f, O, R]),\n      G = q({\n        data: r,\n        startAngle: u,\n        endAngle: f,\n        innerRadius: B.innerRadius,\n        outerRadius: B.radius,\n        padAngle: L,\n        sortByValue: b,\n        activeId: w,\n        activeInnerRadiusOffset: I,\n        activeOuterRadiusOffset: M,\n        hiddenIds: T\n      }),\n      E = t(function (e) {\n        V(function (i) {\n          return i.indexOf(e) > -1 ? i.filter(function (i) {\n            return i !== e;\n          }) : [].concat(i, [e]);\n        });\n      }, []);\n    return D({\n      arcGenerator: p({\n        cornerRadius: R,\n        padAngle: s(L)\n      }),\n      setActiveId: W,\n      toggleSerie: E\n    }, G, B);\n  },\n  K = function (i) {\n    var t = i.dataWithArc,\n      n = i.arcGenerator,\n      r = i.centerX,\n      a = i.centerY,\n      o = i.radius,\n      d = i.innerRadius;\n    return e(function () {\n      return {\n        dataWithArc: t,\n        arcGenerator: n,\n        centerX: r,\n        centerY: a,\n        radius: o,\n        innerRadius: d\n      };\n    }, [t, n, r, a, o, d]);\n  },\n  N = function (i) {\n    var t = i.center,\n      r = i.data,\n      a = i.arcGenerator,\n      o = i.borderWidth,\n      d = i.borderColor,\n      l = i.isInteractive,\n      s = i.onClick,\n      c = i.onMouseEnter,\n      u = i.onMouseMove,\n      v = i.onMouseLeave,\n      f = i.setActiveId,\n      g = i.tooltip,\n      L = i.transitionMode,\n      h = E(),\n      b = h.showTooltipFromEvent,\n      p = h.hideTooltip,\n      k = e(function () {\n        if (l) return function (e, i) {\n          null == s || s(e, i);\n        };\n      }, [l, s]),\n      R = e(function () {\n        if (l) return function (e, i) {\n          b(n(g, {\n            datum: e\n          }), i), f(e.id), null == c || c(e, i);\n        };\n      }, [l, b, f, c, g]),\n      m = e(function () {\n        if (l) return function (e, i) {\n          b(n(g, {\n            datum: e\n          }), i), null == u || u(e, i);\n        };\n      }, [l, b, u, g]),\n      O = e(function () {\n        if (l) return function (e, i) {\n          p(), f(null), null == v || v(e, i);\n        };\n      }, [l, p, f, v]);\n    return W(A, {\n      center: t,\n      data: r,\n      arcGenerator: a,\n      borderWidth: o,\n      borderColor: d,\n      transitionMode: L,\n      onClick: k,\n      onMouseEnter: R,\n      onMouseMove: m,\n      onMouseLeave: O\n    });\n  },\n  Q = [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"],\n  U = function (e) {\n    var i = e.data,\n      t = e.id,\n      a = void 0 === t ? Y.id : t,\n      o = e.value,\n      d = void 0 === o ? Y.value : o,\n      l = e.valueFormat,\n      s = e.sortByValue,\n      c = void 0 === s ? Y.sortByValue : s,\n      u = e.layers,\n      L = void 0 === u ? Y.layers : u,\n      h = e.startAngle,\n      b = void 0 === h ? Y.startAngle : h,\n      p = e.endAngle,\n      k = void 0 === p ? Y.endAngle : p,\n      A = e.padAngle,\n      O = void 0 === A ? Y.padAngle : A,\n      C = e.fit,\n      I = void 0 === C ? Y.fit : C,\n      x = e.innerRadius,\n      M = void 0 === x ? Y.innerRadius : x,\n      y = e.cornerRadius,\n      w = void 0 === y ? Y.cornerRadius : y,\n      S = e.activeInnerRadiusOffset,\n      T = void 0 === S ? Y.activeInnerRadiusOffset : S,\n      V = e.activeOuterRadiusOffset,\n      B = void 0 === V ? Y.activeOuterRadiusOffset : V,\n      G = e.width,\n      E = e.height,\n      D = e.margin,\n      F = e.colors,\n      H = void 0 === F ? Y.colors : F,\n      j = e.borderWidth,\n      q = void 0 === j ? Y.borderWidth : j,\n      z = e.borderColor,\n      Q = void 0 === z ? Y.borderColor : z,\n      U = e.enableArcLabels,\n      Z = void 0 === U ? Y.enableArcLabels : U,\n      $ = e.arcLabel,\n      _ = void 0 === $ ? Y.arcLabel : $,\n      ee = e.arcLabelsSkipAngle,\n      ie = void 0 === ee ? Y.arcLabelsSkipAngle : ee,\n      te = e.arcLabelsTextColor,\n      ne = void 0 === te ? Y.arcLabelsTextColor : te,\n      re = e.arcLabelsRadiusOffset,\n      ae = void 0 === re ? Y.arcLabelsRadiusOffset : re,\n      oe = e.arcLabelsComponent,\n      de = e.enableArcLinkLabels,\n      le = void 0 === de ? Y.enableArcLinkLabels : de,\n      se = e.arcLinkLabel,\n      ce = void 0 === se ? Y.arcLinkLabel : se,\n      ue = e.arcLinkLabelsSkipAngle,\n      ve = void 0 === ue ? Y.arcLinkLabelsSkipAngle : ue,\n      fe = e.arcLinkLabelsOffset,\n      ge = void 0 === fe ? Y.arcLinkLabelsOffset : fe,\n      Le = e.arcLinkLabelsDiagonalLength,\n      he = void 0 === Le ? Y.arcLinkLabelsDiagonalLength : Le,\n      be = e.arcLinkLabelsStraightLength,\n      pe = void 0 === be ? Y.arcLinkLabelsStraightLength : be,\n      ke = e.arcLinkLabelsThickness,\n      Ae = void 0 === ke ? Y.arcLinkLabelsThickness : ke,\n      Re = e.arcLinkLabelsTextOffset,\n      me = void 0 === Re ? Y.arcLinkLabelsTextOffset : Re,\n      Oe = e.arcLinkLabelsTextColor,\n      Ce = void 0 === Oe ? Y.arcLinkLabelsTextColor : Oe,\n      Ie = e.arcLinkLabelsColor,\n      xe = void 0 === Ie ? Y.arcLinkLabelsColor : Ie,\n      Me = e.arcLinkLabelComponent,\n      ye = e.defs,\n      we = void 0 === ye ? Y.defs : ye,\n      We = e.fill,\n      Se = void 0 === We ? Y.fill : We,\n      Te = e.isInteractive,\n      Ve = void 0 === Te ? Y.isInteractive : Te,\n      Be = e.onClick,\n      Ge = e.onMouseEnter,\n      Ee = e.onMouseMove,\n      De = e.onMouseLeave,\n      Fe = e.tooltip,\n      He = void 0 === Fe ? Y.tooltip : Fe,\n      Xe = e.transitionMode,\n      Ye = void 0 === Xe ? Y.transitionMode : Xe,\n      je = e.legends,\n      Pe = void 0 === je ? Y.legends : je,\n      qe = e.role,\n      ze = void 0 === qe ? Y.role : qe,\n      Je = v(G, E, D),\n      Ke = Je.outerWidth,\n      Ne = Je.outerHeight,\n      Qe = Je.margin,\n      Ue = Je.innerWidth,\n      Ze = Je.innerHeight,\n      $e = P({\n        data: i,\n        id: a,\n        value: d,\n        valueFormat: l,\n        colors: H\n      }),\n      _e = J({\n        data: $e,\n        width: Ue,\n        height: Ze,\n        fit: I,\n        innerRadius: M,\n        startAngle: b,\n        endAngle: k,\n        padAngle: O,\n        sortByValue: c,\n        cornerRadius: w,\n        activeInnerRadiusOffset: T,\n        activeOuterRadiusOffset: B\n      }),\n      ei = _e.dataWithArc,\n      ii = _e.legendData,\n      ti = _e.arcGenerator,\n      ni = _e.centerX,\n      ri = _e.centerY,\n      ai = _e.radius,\n      oi = _e.innerRadius,\n      di = _e.setActiveId,\n      li = _e.toggleSerie,\n      si = f(we, ei, Se),\n      ci = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null\n      };\n    le && L.includes(\"arcLinkLabels\") && (ci.arcLinkLabels = W(R, {\n      center: [ni, ri],\n      data: ei,\n      label: ce,\n      skipAngle: ve,\n      offset: ge,\n      diagonalLength: he,\n      straightLength: pe,\n      strokeWidth: Ae,\n      textOffset: me,\n      textColor: Ce,\n      linkColor: xe,\n      component: Me\n    }, \"arcLinkLabels\")), L.includes(\"arcs\") && (ci.arcs = W(N, {\n      center: [ni, ri],\n      data: ei,\n      arcGenerator: ti,\n      borderWidth: q,\n      borderColor: Q,\n      isInteractive: Ve,\n      onClick: Be,\n      onMouseEnter: Ge,\n      onMouseMove: Ee,\n      onMouseLeave: De,\n      setActiveId: di,\n      tooltip: He,\n      transitionMode: Ye\n    }, \"arcs\")), Z && L.includes(\"arcLabels\") && (ci.arcLabels = W(m, {\n      center: [ni, ri],\n      data: ei,\n      label: _,\n      radiusOffset: ae,\n      skipAngle: ie,\n      textColor: ne,\n      transitionMode: Ye,\n      component: oe\n    }, \"arcLabels\")), Pe.length > 0 && L.includes(\"legends\") && (ci.legends = W(X, {\n      width: Ue,\n      height: Ze,\n      data: ii,\n      legends: Pe,\n      toggleSerie: li\n    }, \"legends\"));\n    var ui = K({\n      dataWithArc: ei,\n      arcGenerator: ti,\n      centerX: ni,\n      centerY: ri,\n      radius: ai,\n      innerRadius: oi\n    });\n    return W(g, {\n      width: Ke,\n      height: Ne,\n      margin: Qe,\n      defs: si,\n      role: ze,\n      children: L.map(function (e, i) {\n        return void 0 !== ci[e] ? ci[e] : \"function\" == typeof e ? W(r, {\n          children: n(e, ui)\n        }, i) : null;\n      })\n    });\n  },\n  Z = function (e) {\n    var i = e.isInteractive,\n      t = void 0 === i ? Y.isInteractive : i,\n      n = e.animate,\n      r = void 0 === n ? Y.animate : n,\n      a = e.motionConfig,\n      o = void 0 === a ? Y.motionConfig : a,\n      d = e.theme,\n      l = e.renderWrapper,\n      s = F(e, Q);\n    return W(u, {\n      animate: r,\n      isInteractive: t,\n      motionConfig: o,\n      renderWrapper: l,\n      theme: d,\n      children: W(U, D({\n        isInteractive: t\n      }, s))\n    });\n  },\n  $ = function (e) {\n    return W(L, {\n      children: function (i) {\n        var t = i.width,\n          n = i.height;\n        return W(Z, D({\n          width: t,\n          height: n\n        }, e));\n      }\n    });\n  },\n  _ = [\"isInteractive\", \"theme\", \"renderWrapper\"],\n  ee = function (i) {\n    var t = i.data,\n      r = i.id,\n      d = void 0 === r ? Y.id : r,\n      l = i.value,\n      s = void 0 === l ? Y.value : l,\n      c = i.valueFormat,\n      u = i.sortByValue,\n      f = void 0 === u ? Y.sortByValue : u,\n      g = i.startAngle,\n      L = void 0 === g ? Y.startAngle : g,\n      p = i.endAngle,\n      k = void 0 === p ? Y.endAngle : p,\n      A = i.padAngle,\n      R = void 0 === A ? Y.padAngle : A,\n      m = i.fit,\n      y = void 0 === m ? Y.fit : m,\n      S = i.innerRadius,\n      T = void 0 === S ? Y.innerRadius : S,\n      V = i.cornerRadius,\n      G = void 0 === V ? Y.cornerRadius : V,\n      F = i.activeInnerRadiusOffset,\n      H = void 0 === F ? Y.activeInnerRadiusOffset : F,\n      X = i.activeOuterRadiusOffset,\n      j = void 0 === X ? Y.activeOuterRadiusOffset : X,\n      q = i.width,\n      z = i.height,\n      K = i.margin,\n      N = i.pixelRatio,\n      Q = void 0 === N ? 1 : N,\n      U = i.colors,\n      Z = void 0 === U ? Y.colors : U,\n      $ = i.borderWidth,\n      _ = void 0 === $ ? Y.borderWidth : $,\n      ee = i.borderColor,\n      ie = void 0 === ee ? Y.borderColor : ee,\n      te = i.enableArcLabels,\n      ne = void 0 === te ? Y.enableArcLabels : te,\n      re = i.arcLabel,\n      ae = void 0 === re ? Y.arcLabel : re,\n      oe = i.arcLabelsSkipAngle,\n      de = void 0 === oe ? Y.arcLabelsSkipAngle : oe,\n      le = i.arcLabelsTextColor,\n      se = void 0 === le ? Y.arcLabelsTextColor : le,\n      ce = i.arcLabelsRadiusOffset,\n      ue = void 0 === ce ? Y.arcLabelsRadiusOffset : ce,\n      ve = i.enableArcLinkLabels,\n      fe = void 0 === ve ? Y.enableArcLinkLabels : ve,\n      ge = i.arcLinkLabel,\n      Le = void 0 === ge ? Y.arcLinkLabel : ge,\n      he = i.arcLinkLabelsSkipAngle,\n      be = void 0 === he ? Y.arcLinkLabelsSkipAngle : he,\n      pe = i.arcLinkLabelsOffset,\n      ke = void 0 === pe ? Y.arcLinkLabelsOffset : pe,\n      Ae = i.arcLinkLabelsDiagonalLength,\n      Re = void 0 === Ae ? Y.arcLinkLabelsDiagonalLength : Ae,\n      me = i.arcLinkLabelsStraightLength,\n      Oe = void 0 === me ? Y.arcLinkLabelsStraightLength : me,\n      Ce = i.arcLinkLabelsThickness,\n      Ie = void 0 === Ce ? Y.arcLinkLabelsThickness : Ce,\n      xe = i.arcLinkLabelsTextOffset,\n      Me = void 0 === xe ? Y.arcLinkLabelsTextOffset : xe,\n      ye = i.arcLinkLabelsTextColor,\n      we = void 0 === ye ? Y.arcLinkLabelsTextColor : ye,\n      We = i.arcLinkLabelsColor,\n      Se = void 0 === We ? Y.arcLinkLabelsColor : We,\n      Te = i.isInteractive,\n      Ve = void 0 === Te ? Y.isInteractive : Te,\n      Be = i.onClick,\n      Ge = i.onMouseMove,\n      Ee = i.tooltip,\n      De = void 0 === Ee ? Y.tooltip : Ee,\n      Fe = i.legends,\n      He = void 0 === Fe ? Y.legends : Fe,\n      Xe = a(null),\n      Ye = h(),\n      je = v(q, z, K),\n      Pe = je.margin,\n      qe = je.innerWidth,\n      ze = je.innerHeight,\n      Je = je.outerWidth,\n      Ke = je.outerHeight,\n      Ne = P({\n        data: t,\n        id: d,\n        value: s,\n        valueFormat: c,\n        colors: Z\n      }),\n      Qe = J({\n        data: Ne,\n        width: qe,\n        height: ze,\n        fit: y,\n        innerRadius: T,\n        startAngle: L,\n        endAngle: k,\n        padAngle: R,\n        sortByValue: f,\n        cornerRadius: G,\n        activeInnerRadiusOffset: H,\n        activeOuterRadiusOffset: j\n      }),\n      Ue = Qe.dataWithArc,\n      Ze = Qe.arcGenerator,\n      $e = Qe.centerX,\n      _e = Qe.centerY,\n      ei = Qe.radius,\n      ii = Qe.innerRadius,\n      ti = Qe.setActiveId,\n      ni = B(ie, Ye),\n      ri = O({\n        data: Ue,\n        label: ae,\n        skipAngle: de,\n        offset: ue,\n        textColor: se\n      }),\n      ai = C({\n        data: Ue,\n        skipAngle: be,\n        offset: ke,\n        diagonalLength: Re,\n        straightLength: Oe,\n        label: Le,\n        linkColor: Se,\n        textOffset: Me,\n        textColor: we\n      });\n    o(function () {\n      if (Xe.current) {\n        Xe.current.width = Je * Q, Xe.current.height = Ke * Q;\n        var e = Xe.current.getContext(\"2d\");\n        e.scale(Q, Q), e.fillStyle = Ye.background, e.fillRect(0, 0, Je, Ke), e.save(), e.translate(Pe.left, Pe.top), Ze.context(e), e.save(), e.translate($e, _e), Ue.forEach(function (i) {\n          e.beginPath(), e.fillStyle = i.color, e.strokeStyle = ni(i), e.lineWidth = _, Ze(i.arc), e.fill(), _ > 0 && e.stroke();\n        }), !0 === fe && I(e, ai, Ye, Ie), !0 === ne && x(e, ri, Ye), e.restore(), He.forEach(function (i) {\n          w(e, D({}, i, {\n            data: Ue,\n            containerWidth: qe,\n            containerHeight: ze,\n            theme: Ye\n          }));\n        });\n      }\n    }, [Xe, qe, ze, Je, Ke, Pe.top, Pe.left, Q, $e, _e, Ze, Ue, ni, ne, ri, fe, ai, Ie, He, Ye]);\n    var oi = e(function () {\n        return Ue.map(function (e) {\n          return D({\n            id: e.id\n          }, e.arc);\n        });\n      }, [Ue]),\n      di = function (e) {\n        if (!Xe.current) return null;\n        var i = b(Xe.current, e),\n          t = i[0],\n          n = i[1],\n          r = M(Pe.left + $e, Pe.top + _e, ei, ii, oi, t, n);\n        return r ? Ue.find(function (e) {\n          return e.id === r.id;\n        }) : null;\n      },\n      li = E(),\n      si = li.showTooltipFromEvent,\n      ci = li.hideTooltip,\n      ui = function (e) {\n        var i = di(e);\n        i ? (null == Ge || Ge(i, e), ti(i.id), si(n(De, {\n          datum: i\n        }), e)) : (ti(null), ci());\n      };\n    return W(\"canvas\", {\n      ref: Xe,\n      width: Je * Q,\n      height: Ke * Q,\n      style: {\n        width: Je,\n        height: Ke,\n        cursor: Ve ? \"auto\" : \"normal\"\n      },\n      onMouseEnter: Ve ? ui : void 0,\n      onMouseMove: Ve ? ui : void 0,\n      onMouseLeave: Ve ? function () {\n        ci();\n      } : void 0,\n      onClick: Ve ? function (e) {\n        if (Be) {\n          var i = di(e);\n          i && Be(i, e);\n        }\n      } : void 0\n    });\n  },\n  ie = function (e) {\n    var i = e.isInteractive,\n      t = void 0 === i ? Y.isInteractive : i,\n      n = e.theme,\n      r = e.renderWrapper,\n      a = F(e, _);\n    return W(u, {\n      isInteractive: t,\n      renderWrapper: r,\n      theme: n,\n      children: W(ee, D({\n        isInteractive: t\n      }, a))\n    });\n  },\n  te = function (e) {\n    return W(L, {\n      children: function (i) {\n        var t = i.width,\n          n = i.height;\n        return W(ie, D({\n          width: t,\n          height: n\n        }, e));\n      }\n    });\n  };\nexport { Z as Pie, ie as PieCanvas, $ as ResponsivePie, te as ResponsivePieCanvas, Y as defaultProps, P as useNormalizedData, z as usePie, q as usePieArcs, J as usePieFromBox, K as usePieLayerContext };","map":{"version":3,"mappings":"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","names":["PieLegends","width","height","legends","data","toggleSerie","_jsx","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","undefined","defaultProps","id","value","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","devicePixelRatio","j","useNormalizedData","valueFormat","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","datumId","datumValue","normalizedDatum","label","hidden","usePieArcs","outerRadius","activeId","hiddenIds","pie","innerPie","d3Pie","d","degreesToRadians","sortValues","hiddenData","filter","item","includes","dataWithArc","arc","angle","Math","abs","index","thickness","angleDeg","radiansToDegrees","legendData","usePie","radius","useState","setActiveId","setHiddenIds","pieArcs","useCallback","state","indexOf","arcGenerator","useArcGenerator","usePieFromBox","innerRadiusRatio","computedProps","boundingBox","min","centerX","centerY","computeArcBoundingBox","points","box","ratio","adjustedBox","x","y","debug","usePieLayerContext","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcs","arcLabels","ArcLinkLabelsLayer","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","length","layerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","props","ResponsiveWrapper","InnerPieCanvas","U","canvasEl","useRef","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","getRelativeCursor","hoveredArc","findArcUnderCursor","find","li","handleMouseHover","ref","style","cursor","PieCanvas","ResponsivePieCanvas"],"sources":["/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/PieLegends.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/props.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/PieTooltip.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/hooks.ts","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/Arcs.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/Pie.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/ResponsivePie.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/PieCanvas.tsx","/Users/mitchfrauenheim/Stock App/client/node_modules/@nivo/pie/src/ResponsivePieCanvas.tsx"],"sourcesContent":["import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}